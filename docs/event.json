{ platform: 'webchat',
type: 'quick_reply',
user:
 anonymous {
   id: 'webchat:aa19319a-978e-4529-999f-72dbc63698d5',
   userId: 'aa19319a-978e-4529-999f-72dbc63698d5',
   platform: 'webchat',
   gender: 'unknown',
   timezone: null,
   picture_url: null,
   first_name: 'Battlefoe',
   last_name: 'Loon',
   locale: null,
   created_on: 2018-04-04T12:55:45.222Z },
text: 'Sim',
raw:
 { text: 'Sim',
   type: 'quick_reply',
   data: { payload: 'ATENDIDO_ANTERIORMENTE_SIM' },
   conversationId: 1 },
payload: 'ATENDIDO_ANTERIORMENTE_SIM',
bp:
 botpress {
   start: [Function],
   version: '10.0.6',
   projectLocation: '/bot',
   botfile:
    { dataDir: './_data',
      port: 3000,
      modulesConfigDir: './',
      contentDir: './src/content',
      flowsDir: './src/flows',
      contentDataDir: './src/content_data',
      disableFileLogs: false,
      log: [Object],
      api: [Object],
      dialogs: [Object],
      optOutStats: false,
      notification: [Object],
      ghostContent: [Object],
      login: [Object],
      postgres: [Object],
      middleware: [Object],
      config: [Object],
      license: {} },
   stats:
    { track: [Function: track],
      trackException: [Function: trackException] },
   interval:
    Timeout {
      _called: true,
      _idleTimeout: 30000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 61124,
      _onTimeout: [Function],
      _timerArgs: undefined,
      _repeat: 30000,
      _destroyed: false,
      [Symbol(asyncId)]: 21,
      [Symbol(triggerAsyncId)]: 1 },
   dataLocation: '/bot/_data',
   isFirstRun: false,
   logger:
    EventEmitter {
      domain: null,
      _events: {},
      _eventsCount: 0,
      _maxListeners: undefined,
      transports: [Object],
      _names: [Array],
      padLevels: false,
      levels: [Object],
      error: [Function],
      warn: [Function],
      info: [Function],
      verbose: [Function],
      debug: [Function],
      silly: [Function],
      id: null,
      level: 'debug',
      emitErrs: false,
      stripColors: false,
      exitOnError: true,
      exceptionHandlers: {},
      profilers: {},
      rewriters: [],
      filters: [],
      enableFileTransport: [Function],
      archiveToFile: [Function] },
   security:
    { login: [Function: login],
      refreshToken: [Function: refreshToken],
      authenticate: [Function: authenticate],
      getSecret: [Function],
      _authentication: [Object] },
   events:
    EventBus {
      _events: [Object],
      newListener: false,
      verboseMemoryLeak: false,
      _conf: [Object],
      wildcard: true,
      listenerTree: [Object],
      _all: [Array],
      event: 'guest.webchat.message' },
   notifications:
    { load: [Function: getInbox],
      send: [Function: send],
      markAsRead: [Function: markAsRead],
      markAllAsRead: [Function: markAllAsRead],
      archiveAll: [Function: archiveAll],
      archive: [Function: archive],
      getInbox: [Function: getInbox],
      getArchived: [Function: getArchived],
      create: [Function: create],
      _bindEvents: [Function: _bindEvents] },
   about: { getBotInformation: [Function: getBotInformation] },
   middlewares:
    { load: [Function: load],
      list: [Function: list],
      register: [Function: register],
      sendIncoming: [Function: sendIncoming],
      sendOutgoing: [Function: sendOutgoing],
      sendIncomingImmediately: [Function],
      sendOutgoingImmediately: [Function],
      getCustomizations: [Function: getCustomizations],
      setCustomizations: [Function: setCustomizations],
      resetCustomizations: [Function: resetCustomizations] },
   hear: [Function: hear],
   licensing:
    { getLicensing: [Function: getLicensing],
      changeLicense: [Function],
      middleware: [Function],
      getFeatures: [Function: getFeatures] },
   modules:
    { listAllCommunityModules: [Function],
      getRandomCommunityHero: [Function],
      listInstalled: [Function: listInstalledModules],
      _scan: [Function: scanModules],
      _load: [Function: loadModules] },
   db:
    { get: [Function: getDb],
      saveUser: [Function: saveUser],
      location: 'postgres',
      kvs: [Object] },
   emails: undefined,
   mediator:
    { install: [Function: install],
      uninstall: [Function: uninstall] },
   renderers:
    { registerChannel: [Function: registerChannel],
      registerConnector: [Function: registerChannel],
      register: [Function: register],
      unregister: [Function: unregister],
      isRegistered: [Function: isRegistered],
      incomingMiddleware: [Object],
      sendToUser: [Function: sendToUser] },
   umm:
    { registerChannel: [Function: registerChannel],
      registerConnector: [Function: registerChannel],
      register: [Function: register],
      unregister: [Function: unregister],
      isRegistered: [Function: isRegistered],
      incomingMiddleware: [Object],
      sendToUser: [Function: sendToUser] },
   users:
    { tag: [Function: tag],
      untag: [Function: untag],
      hasTag: [Function: hasTag],
      getTag: [Function: getTag],
      getTags: [Function: getTags],
      list: [Function: list],
      count: [Function: count],
      listWithTags: [Function: listWithTags] },
   ghostManager:
    { addRootFolder: [Function: addRootFolder],
      upsertFile: [Function: upsertFile],
      readFile: [Function: readFile],
      deleteFile: [Function: deleteFile],
      directoryListing: [Function: directoryListing],
      getPending: [Function: getPending],
      getPendingWithContent: [Function: getPendingWithContent] },
   contentManager:
    { init: [Function: init],
      listAvailableCategories: [Function: listAvailableCategories],
      getCategorySchema: [Function: getCategorySchema],
      createOrUpdateCategoryItem: [Function: createOrUpdateCategoryItem],
      listCategoryItems: [Function: listCategoryItems],
      categoryItemsCount: [Function: categoryItemsCount],
      deleteCategoryItems: [Function: deleteCategoryItems],
      getItem: [Function: getItem],
      getItemsByMetadata: [Function: getItemsByMetadata],
      registerGetItemProvider: [Function: registerGetItemProvider] },
   dialogEngine:
    DialogEngine {
      onError: [Function],
      logger: [EventEmitter],
      flowProvider: [FlowProvider],
      stateManager: [Object],
      flowsLoaded: true,
      flows: [Array],
      defaultFlow: 'main.flow.json',
      outputProcessors: [Array],
      errorHandlers: [Array],
      functions: [Object],
      functionMetadataProvider: [Function] },
   dialogJanitor:
    { install: [Function: install],
      uninstall: [Function: uninstall],
      runOnce: [Function: run] },
   messages: { in: [Object], out: [Object] },
   skills: SkillsManager { _log: [Function], logger: [EventEmitter], _skills: {} },
   _loadedModules: { '@botpress/channel-web': [Object] },
   getRouter: [Function],
   createShortlink: [Function],
   stopServer: undefined },
reply: [Function],
captured: [] }
